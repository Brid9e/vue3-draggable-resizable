import { App } from 'vue';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        }> & Pick<Readonly<{
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "key" | "ref" | "class" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        } & {}>, {
            setWidth(val: number): void;
            setHeight(val: number): void;
            setTop(val: number): void;
            setLeft(val: number): void;
            minWidth: import("vue").ComputedRef<number>;
            minHeight: import("vue").ComputedRef<number>;
            maxWidth: import("vue").ComputedRef<number>;
            maxHeight: import("vue").ComputedRef<number>;
            minLeft: import("vue").ComputedRef<number>;
            minTop: import("vue").ComputedRef<number>;
            maxLeft: import("vue").ComputedRef<number>;
            maxTop: import("vue").ComputedRef<number>;
            parentWidth: import("vue").Ref<number>;
            parentHeight: import("vue").Ref<number>;
            width: import("vue").Ref<number>;
            height: import("vue").Ref<number>;
            top: import("vue").Ref<number>;
            left: import("vue").Ref<number>;
            enable: import("vue").Ref<boolean>;
            dragging: import("vue").Ref<boolean>;
            resizing: import("vue").Ref<boolean>;
            resizingHandle: import("vue").Ref<import("./components/vue3-draggable-resizable").ResizingHandle>;
            setEnable: (value: boolean) => void;
            setDragging: (value: boolean) => void;
            setResizing: (value: boolean) => void;
            setResizingHandle: (value: import("./components/vue3-draggable-resizable").ResizingHandle) => void;
            $setWidth: (value: number) => void;
            $setHeight: (value: number) => void;
            $setTop: (value: number) => void;
            $setLeft: (value: number) => void;
            containerRef: import("vue").Ref<HTMLElement>;
        }, {}, {
            style(): {
                [propName: string]: string;
            };
            klass(): {
                [propName: string]: string | boolean;
            };
        }, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: TimerHandler, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        active: boolean;
        x: number;
        y: number;
        initW: number;
        initH: number;
        w: number;
        h: number;
        draggable: boolean;
        resizable: boolean;
        minW: number;
        minH: number;
        parent: boolean;
        handles: unknown[];
    } & {}> & import("vue").ShallowUnwrapRef<{
        setWidth(val: number): void;
        setHeight(val: number): void;
        setTop(val: number): void;
        setLeft(val: number): void;
        minWidth: import("vue").ComputedRef<number>;
        minHeight: import("vue").ComputedRef<number>;
        maxWidth: import("vue").ComputedRef<number>;
        maxHeight: import("vue").ComputedRef<number>;
        minLeft: import("vue").ComputedRef<number>;
        minTop: import("vue").ComputedRef<number>;
        maxLeft: import("vue").ComputedRef<number>;
        maxTop: import("vue").ComputedRef<number>;
        parentWidth: import("vue").Ref<number>;
        parentHeight: import("vue").Ref<number>;
        width: import("vue").Ref<number>;
        height: import("vue").Ref<number>;
        top: import("vue").Ref<number>;
        left: import("vue").Ref<number>;
        enable: import("vue").Ref<boolean>;
        dragging: import("vue").Ref<boolean>;
        resizing: import("vue").Ref<boolean>;
        resizingHandle: import("vue").Ref<import("./components/vue3-draggable-resizable").ResizingHandle>;
        setEnable: (value: boolean) => void;
        setDragging: (value: boolean) => void;
        setResizing: (value: boolean) => void;
        setResizingHandle: (value: import("./components/vue3-draggable-resizable").ResizingHandle) => void;
        $setWidth: (value: number) => void;
        $setHeight: (value: number) => void;
        $setTop: (value: number) => void;
        $setLeft: (value: number) => void;
        containerRef: import("vue").Ref<HTMLElement>;
    }> & {
        style: {
            [propName: string]: string;
        };
        klass: {
            [propName: string]: string | boolean;
        };
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    active: boolean;
    x: number;
    y: number;
    initW: number;
    initH: number;
    w: number;
    h: number;
    draggable: boolean;
    resizable: boolean;
    minW: number;
    minH: number;
    parent: boolean;
    handles: unknown[];
} & {}>, {
    setWidth(val: number): void;
    setHeight(val: number): void;
    setTop(val: number): void;
    setLeft(val: number): void;
    minWidth: import("vue").ComputedRef<number>;
    minHeight: import("vue").ComputedRef<number>;
    maxWidth: import("vue").ComputedRef<number>;
    maxHeight: import("vue").ComputedRef<number>;
    minLeft: import("vue").ComputedRef<number>;
    minTop: import("vue").ComputedRef<number>;
    maxLeft: import("vue").ComputedRef<number>;
    maxTop: import("vue").ComputedRef<number>;
    parentWidth: import("vue").Ref<number>;
    parentHeight: import("vue").Ref<number>;
    width: import("vue").Ref<number>;
    height: import("vue").Ref<number>;
    top: import("vue").Ref<number>;
    left: import("vue").Ref<number>;
    enable: import("vue").Ref<boolean>;
    dragging: import("vue").Ref<boolean>;
    resizing: import("vue").Ref<boolean>;
    resizingHandle: import("vue").Ref<import("./components/vue3-draggable-resizable").ResizingHandle>;
    setEnable: (value: boolean) => void;
    setDragging: (value: boolean) => void;
    setResizing: (value: boolean) => void;
    setResizingHandle: (value: import("./components/vue3-draggable-resizable").ResizingHandle) => void;
    $setWidth: (value: number) => void;
    $setHeight: (value: number) => void;
    $setTop: (value: number) => void;
    $setLeft: (value: number) => void;
    containerRef: import("vue").Ref<HTMLElement>;
}, {}, {
    style(): {
        [propName: string]: string;
    };
    klass(): {
        [propName: string]: string | boolean;
    };
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
    active: boolean;
    x: number;
    y: number;
    initW: number;
    initH: number;
    w: number;
    h: number;
    draggable: boolean;
    resizable: boolean;
    minW: number;
    minH: number;
    parent: boolean;
    handles: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        }> & Pick<Readonly<{
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "key" | "ref" | "class" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        } & {}>, {
            setWidth(val: number): void;
            setHeight(val: number): void;
            setTop(val: number): void;
            setLeft(val: number): void;
            minWidth: import("vue").ComputedRef<number>;
            minHeight: import("vue").ComputedRef<number>;
            maxWidth: import("vue").ComputedRef<number>;
            maxHeight: import("vue").ComputedRef<number>;
            minLeft: import("vue").ComputedRef<number>;
            minTop: import("vue").ComputedRef<number>;
            maxLeft: import("vue").ComputedRef<number>;
            maxTop: import("vue").ComputedRef<number>;
            parentWidth: import("vue").Ref<number>;
            parentHeight: import("vue").Ref<number>;
            width: import("vue").Ref<number>;
            height: import("vue").Ref<number>;
            top: import("vue").Ref<number>;
            left: import("vue").Ref<number>;
            enable: import("vue").Ref<boolean>;
            dragging: import("vue").Ref<boolean>;
            resizing: import("vue").Ref<boolean>;
            resizingHandle: import("vue").Ref<import("./components/vue3-draggable-resizable").ResizingHandle>;
            setEnable: (value: boolean) => void;
            setDragging: (value: boolean) => void;
            setResizing: (value: boolean) => void;
            setResizingHandle: (value: import("./components/vue3-draggable-resizable").ResizingHandle) => void;
            $setWidth: (value: number) => void;
            $setHeight: (value: number) => void;
            $setTop: (value: number) => void;
            $setLeft: (value: number) => void;
            containerRef: import("vue").Ref<HTMLElement>;
        }, {}, {
            style(): {
                [propName: string]: string;
            };
            klass(): {
                [propName: string]: string | boolean;
            };
        }, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            active: boolean;
            x: number;
            y: number;
            initW: number;
            initH: number;
            w: number;
            h: number;
            draggable: boolean;
            resizable: boolean;
            minW: number;
            minH: number;
            parent: boolean;
            handles: unknown[];
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: TimerHandler, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        active: boolean;
        x: number;
        y: number;
        initW: number;
        initH: number;
        w: number;
        h: number;
        draggable: boolean;
        resizable: boolean;
        minW: number;
        minH: number;
        parent: boolean;
        handles: unknown[];
    } & {}> & import("vue").ShallowUnwrapRef<{
        setWidth(val: number): void;
        setHeight(val: number): void;
        setTop(val: number): void;
        setLeft(val: number): void;
        minWidth: import("vue").ComputedRef<number>;
        minHeight: import("vue").ComputedRef<number>;
        maxWidth: import("vue").ComputedRef<number>;
        maxHeight: import("vue").ComputedRef<number>;
        minLeft: import("vue").ComputedRef<number>;
        minTop: import("vue").ComputedRef<number>;
        maxLeft: import("vue").ComputedRef<number>;
        maxTop: import("vue").ComputedRef<number>;
        parentWidth: import("vue").Ref<number>;
        parentHeight: import("vue").Ref<number>;
        width: import("vue").Ref<number>;
        height: import("vue").Ref<number>;
        top: import("vue").Ref<number>;
        left: import("vue").Ref<number>;
        enable: import("vue").Ref<boolean>;
        dragging: import("vue").Ref<boolean>;
        resizing: import("vue").Ref<boolean>;
        resizingHandle: import("vue").Ref<import("./components/vue3-draggable-resizable").ResizingHandle>;
        setEnable: (value: boolean) => void;
        setDragging: (value: boolean) => void;
        setResizing: (value: boolean) => void;
        setResizingHandle: (value: import("./components/vue3-draggable-resizable").ResizingHandle) => void;
        $setWidth: (value: number) => void;
        $setHeight: (value: number) => void;
        $setTop: (value: number) => void;
        $setLeft: (value: number) => void;
        containerRef: import("vue").Ref<HTMLElement>;
    }> & {
        style: {
            [propName: string]: string;
        };
        klass: {
            [propName: string]: string | boolean;
        };
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    active: boolean;
    x: number;
    y: number;
    initW: number;
    initH: number;
    w: number;
    h: number;
    draggable: boolean;
    resizable: boolean;
    minW: number;
    minH: number;
    parent: boolean;
    handles: unknown[];
} & {}>, {
    setWidth(val: number): void;
    setHeight(val: number): void;
    setTop(val: number): void;
    setLeft(val: number): void;
    minWidth: import("vue").ComputedRef<number>;
    minHeight: import("vue").ComputedRef<number>;
    maxWidth: import("vue").ComputedRef<number>;
    maxHeight: import("vue").ComputedRef<number>;
    minLeft: import("vue").ComputedRef<number>;
    minTop: import("vue").ComputedRef<number>;
    maxLeft: import("vue").ComputedRef<number>;
    maxTop: import("vue").ComputedRef<number>;
    parentWidth: import("vue").Ref<number>;
    parentHeight: import("vue").Ref<number>;
    width: import("vue").Ref<number>;
    height: import("vue").Ref<number>;
    top: import("vue").Ref<number>;
    left: import("vue").Ref<number>;
    enable: import("vue").Ref<boolean>;
    dragging: import("vue").Ref<boolean>;
    resizing: import("vue").Ref<boolean>;
    resizingHandle: import("vue").Ref<import("./components/vue3-draggable-resizable").ResizingHandle>;
    setEnable: (value: boolean) => void;
    setDragging: (value: boolean) => void;
    setResizing: (value: boolean) => void;
    setResizingHandle: (value: import("./components/vue3-draggable-resizable").ResizingHandle) => void;
    $setWidth: (value: number) => void;
    $setHeight: (value: number) => void;
    $setTop: (value: number) => void;
    $setLeft: (value: number) => void;
    containerRef: import("vue").Ref<HTMLElement>;
}, {}, {
    style(): {
        [propName: string]: string;
    };
    klass(): {
        [propName: string]: string | boolean;
    };
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
    active: boolean;
    x: number;
    y: number;
    initW: number;
    initH: number;
    w: number;
    h: number;
    draggable: boolean;
    resizable: boolean;
    minW: number;
    minH: number;
    parent: boolean;
    handles: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
});
export default _default;
